// <auto-generated />
using System;
using FlexHR.DataAccess.Concrete.EntityFrameworkCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlexHR.DataAccess.Migrations
{
    [DbContext(typeof(FlexHRContext))]
    [Migration("20210908080717_change_salary")]
    partial class change_salary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("FlexHR.Entity.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorizeTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StaffId")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.CompanyBranch", b =>
                {
                    b.Property<int>("CompanyBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyBranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBranch");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.CompanyFile", b =>
                {
                    b.Property<int>("CompanyFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FileFullPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CompanyFileId");

                    b.ToTable("CompanyFile");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.EmailHistory", b =>
                {
                    b.Property<int>("EmailHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AttachmentFileFullPath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailCc")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("EmailCC");

                    b.Property<string>("EmailFrom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmailStateGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EmailSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SendAttemptCount")
                        .HasColumnType("int");

                    b.HasKey("EmailHistoryId");

                    b.ToTable("EmailHistory");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AllowNulls")
                        .HasColumnType("bit");

                    b.Property<string>("ColumnDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ColumnSequence")
                        .HasColumnType("int");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.ToTable("FileColumn");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumnProperties", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("FileColumnProperties");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumn_FileColumnProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FileColumnId")
                        .HasColumnType("int");

                    b.Property<int>("FileColumnPropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileColumnId");

                    b.HasIndex("FileColumnPropertiesId");

                    b.ToTable("FileColumn_FileColumnProperties");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FileUploadTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.GeneralSubType", b =>
                {
                    b.Property<int>("GeneralSubTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GeneralTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeneralSubTypeId");

                    b.HasIndex("GeneralTypeId");

                    b.ToTable("GeneralSubType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.GeneralType", b =>
                {
                    b.Property<int>("GeneralTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GeneralTypeId");

                    b.ToTable("GeneralType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.LeaveRule", b =>
                {
                    b.Property<int>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AditionalLeaveAmount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SeniorityYear")
                        .HasColumnType("int");

                    b.HasKey("RuleId");

                    b.ToTable("LeaveRules");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LeaveType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.PublicHoliday", b =>
                {
                    b.Property<int>("PublicHolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHalfDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PublicHolidayId");

                    b.ToTable("PublicHoliday");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FileFullPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffPaymentId")
                        .HasColumnType("int");

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StaffPaymentId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContractTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("EmailJob")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailPersonal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JobFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("JobJoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PersonalNo")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("PhoneJob")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhonePersonal")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("WillUseSystem")
                        .HasColumnType("bit");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffCareer", b =>
                {
                    b.Property<int>("StaffCareerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompanyBranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmantGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JobFinishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("JobStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModeOfOperationGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("TitleGeneralSubTypeId")
                        .HasColumnType("int");

                    b.HasKey("StaffCareerId");

                    b.HasIndex("CompanyBranchId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffCareer");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffDebit", b =>
                {
                    b.Property<int>("StaffDebitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DebitGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffDebitId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffDebit");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffFile", b =>
                {
                    b.Property<int>("StaffFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FileFullPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FileGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffFileId");

                    b.HasIndex("StaffId");

                    b.ToTable("Staff_File");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffLeave", b =>
                {
                    b.Property<int>("StaffLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("GeneralStatusGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMailSentToStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentForApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaveEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LeaveStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("TotalDay")
                        .HasColumnType("int");

                    b.HasKey("StaffLeaveId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLeave");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffOtherInfo", b =>
                {
                    b.Property<int>("StaffOtherInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountNo")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("AccountTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CallPersonNameSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CallPersonPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("CallPersonProximityDegree")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HomePhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Iban")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IBAN");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("TownId")
                        .HasColumnType("int");

                    b.HasKey("StaffOtherInfoId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TownId");

                    b.ToTable("StaffOtherInfo");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffPayment", b =>
                {
                    b.Property<int>("StaffPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("FeeTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GeneralStatusGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Installment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMailSentToStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentForApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffPaymentId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffPayment");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffPersonelInfo", b =>
                {
                    b.Property<int>("StaffPersonelInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("BloodGroupGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DegreeOfDisabilityGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationLevelGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationStatusGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IdNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MaritalStatusGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffPersonelInfoId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffPersonelInfo");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffSalary", b =>
                {
                    b.Property<int>("StaffSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal?>("ConstantBonus")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("CurrencyGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<int>("FeeTypeGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FoodPayment")
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgi")
                        .HasColumnType("bit")
                        .HasColumnName("IsAGI");

                    b.Property<int>("PeriodGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PrivateHealthCare")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("PrivatePension")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal?>("RoadPayment")
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("StaffSalaryId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSalary");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffShift", b =>
                {
                    b.Property<int>("StaffShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GeneralStatusGeneralSubTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMailSentToStaff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSentForApproval")
                        .HasColumnType("bit");

                    b.Property<int>("ShiftHour")
                        .HasColumnType("int");

                    b.Property<int>("ShiftMinute")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("StaffShiftId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffShift");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Town", b =>
                {
                    b.Property<int>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TownId");

                    b.HasIndex("CityId");

                    b.ToTable("Town");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.AppUser", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithOne("AppUser")
                        .HasForeignKey("FlexHR.Entity.Concrete.AppUser", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.City", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Country", "Country")
                        .WithMany("City")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_City_Country")
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.CompanyBranch", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Company", "Company")
                        .WithMany("CompanyBranch")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyBranch_Company")
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumn", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.FileType", "FileType")
                        .WithMany("FileColumn")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_FileColumn_FileType")
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumn_FileColumnProperties", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.FileColumn", "FileColumn")
                        .WithMany("FileColumn_FileColumnProperties")
                        .HasForeignKey("FileColumnId")
                        .HasConstraintName("FK_FileColumnFileColumnProperties_FileColumn")
                        .IsRequired();

                    b.HasOne("FlexHR.Entity.Concrete.FileColumnProperties", "FileColumnProperties")
                        .WithMany("FileColumn_FileColumnProperties")
                        .HasForeignKey("FileColumnPropertiesId")
                        .HasConstraintName("FK_FileColumnFileColumnProperties_FileColumnProperties")
                        .IsRequired();

                    b.Navigation("FileColumn");

                    b.Navigation("FileColumnProperties");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.GeneralSubType", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.GeneralType", "GeneralType")
                        .WithMany("GeneralSubType")
                        .HasForeignKey("GeneralTypeId")
                        .HasConstraintName("FK_GeneralSubType_GeneralType")
                        .IsRequired();

                    b.Navigation("GeneralType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Receipt", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.StaffPayment", "StaffPayment")
                        .WithMany("Receipts")
                        .HasForeignKey("StaffPaymentId")
                        .HasConstraintName("FK_StaffPayment_Receipt")
                        .IsRequired();

                    b.Navigation("StaffPayment");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffCareer", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.CompanyBranch", "CompanyBranch")
                        .WithMany("StaffCareer")
                        .HasForeignKey("CompanyBranchId")
                        .HasConstraintName("FK_StaffCareer_CompanyBranch")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffCareer")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffCareer_Staff")
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffDebit", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffDebit")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffDebit_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffFile", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffFile")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Staff_File_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffLeave", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.LeaveType", "LeaveType")
                        .WithMany("StaffLeave")
                        .HasForeignKey("LeaveTypeId")
                        .HasConstraintName("FK_StaffLeave_LeaveType")
                        .IsRequired();

                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffLeave")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffLeave_Staff")
                        .IsRequired();

                    b.Navigation("LeaveType");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffOtherInfo", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffOtherInfo")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffOtherInfo_Staff")
                        .IsRequired();

                    b.HasOne("FlexHR.Entity.Concrete.Town", "Town")
                        .WithMany("StaffOtherInfo")
                        .HasForeignKey("TownId")
                        .HasConstraintName("FK_StaffOtherInfo_Town");

                    b.Navigation("Staff");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffPayment", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffPayment")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffPayment_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffPersonelInfo", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffPersonelInfo")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffPersonelInfo_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffSalary", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffSalary")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffSalary_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffShift", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.Staff", "Staff")
                        .WithMany("StaffShift")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_StaffShift_Staff")
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Town", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.City", "City")
                        .WithMany("Town")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Town_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlexHR.Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("FlexHR.Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.City", b =>
                {
                    b.Navigation("Town");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Company", b =>
                {
                    b.Navigation("CompanyBranch");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.CompanyBranch", b =>
                {
                    b.Navigation("StaffCareer");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Country", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumn", b =>
                {
                    b.Navigation("FileColumn_FileColumnProperties");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileColumnProperties", b =>
                {
                    b.Navigation("FileColumn_FileColumnProperties");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.FileType", b =>
                {
                    b.Navigation("FileColumn");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.GeneralType", b =>
                {
                    b.Navigation("GeneralSubType");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.LeaveType", b =>
                {
                    b.Navigation("StaffLeave");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Staff", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("StaffCareer");

                    b.Navigation("StaffDebit");

                    b.Navigation("StaffFile");

                    b.Navigation("StaffLeave");

                    b.Navigation("StaffOtherInfo");

                    b.Navigation("StaffPayment");

                    b.Navigation("StaffPersonelInfo");

                    b.Navigation("StaffSalary");

                    b.Navigation("StaffShift");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.StaffPayment", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("FlexHR.Entity.Concrete.Town", b =>
                {
                    b.Navigation("StaffOtherInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
